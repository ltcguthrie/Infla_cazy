install.packages("readr")
install.packages("dplyr")
install.packages("extrafont")
install.packages("scales")
install.packages("scales")
install.packages("grid")
install.packages("RcolorBrewer")
install.packages("RColorBrewer")
install.packages("digest")
install.packages("stringr")
library(bigrquery)
install.packages("bigquery")
install.packages("bigrquery")
install.packages("ggplot2")
?grid.layout
??grid.layout
library(readr)
library(dplyr)
library(ggplot2)
library(extrafont)
library(scales)
library(RColorBrewer)
library(digest)
library(stringr)
fontFamily <- "Source Sans Pro"
fontTitle <- "Source Sans Pro Semibold"
color_palette = c("#16a085","#27ae60","#2980b9","#8e44ad","#f39c12","#c0392b","#1abc9c", "#2ecc71", "#3498db", "#9b59b6", "#f1c40f","#e74c3c")
neutral_colors = function(number) {
return (brewer.pal(11, "RdYlBu")[-c(5:7)][(number %% 8) + 1])
}
set1_colors = function(number) {
return (brewer.pal(9, "Set1")[c(-6,-8)][(number %% 7) + 1])
}
theme_custom <- function() {theme_bw(base_size = 8) +
theme(panel.background = element_rect(fill="#eaeaea"),
plot.background = element_rect(fill="white"),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(color="#dddddd"),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_text(family=fontTitle, size=8, vjust=-.3),
axis.title.y = element_text(family=fontTitle, size=8, vjust=1.5),
panel.border = element_rect(color="#cccccc"),
text = element_text(color = "#1a1a1a", family=fontFamily),
plot.margin = unit(c(0.25,0.1,0.30,0.35), "cm"),
plot.title = element_text(family=fontTitle, size=9, vjust=1))
}
create_watermark <- function(source = '', filename = '', dark=F) {
symbols <- c('','', '', '')
symbol <- symbols[strtoi(substr(digest(filename),1,6), base=36) %% length(symbols)]
if (length(symbol)==0) symbol <- symbols[1]
bg_white = "#F0F0F0"
bg_text = '#969696'
if (dark) {
bg_white = "#000000"
bg_text = '#666666'
}
watermark <- ggplot(aes(x,y), data=data.frame(x=c(0.5), y=c(0.5))) + geom_point(color = "transparent") +
geom_text(x=0, y=0.9, label="By Max Woolf â€” minimaxir.com", family="Source Sans Pro", color=bg_text, size=1.75, hjust=0) +
geom_text(x=5, y=0.9, label="Made using R and ggplot2", family="Source Sans Pro", color=bg_text, size=1.75) +
#geom_text(x=0, y=1.01, label = symbol, family = 'FontAwesome', color=bg_text, size=2) +
#geom_text(x=8, y=1, label = "via FiveThirtyEight", family="M+ 1m light", color="white") +
scale_x_continuous(limits=c(0,10)) +
scale_y_continuous(limits=c(0.5,1.5)) +
annotate("segment", x = 0, xend = 10, y=1.5, yend=1.5, color=bg_text, size=0.1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none",
panel.border = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks = element_blank(), plot.margin = unit(c(0.1,0,-0.4,0), "cm")) +
theme(plot.background=element_rect(fill=bg_white, color=bg_white),panel.background=element_rect(fill=bg_white, color=bg_white)) +
scale_color_manual(values=bg_text)
if (nchar(source) > 0) {watermark <- watermark + geom_text(x=10, y=0.9, label=paste("Data via",source), family="Source Sans Pro", color=bg_text, size=1.75, hjust=1)}
return (watermark)
}
web_Layout <- grid.layout(nrow = 2, ncol = 1, heights = unit(c(2,
0.125), c("null", "null")), )
library(grid)
web_Layout <- grid.layout(nrow = 2, ncol = 1, heights = unit(c(2,
0.125), c("null", "null")), )
library(httr)
install.packages("httpuv")
library(biqrquery)
library(bigrquery)
library(bigrquery)
library(methods) # needed for query_exec in Jupyter: https://github.com/hadley/bigrquery/issues/32
options(repr.plot.mimetypes = 'image/png', repr.plot.width=4, repr.plot.height=3, repr.plot.res=300)
sessionInfo()
project_id <- "nyctaxi"   # DO NOT SHARE!
query <- "SELECT ROUND(pickup_latitude, 4) AS lat,
ROUND(pickup_longitude, 4) AS long,
COUNT(*) AS num_pickups,
SUM(fare_amount) AS total_revenue
FROM [nyc-tlc:yellow.trips]
WHERE fare_amount/trip_distance BETWEEN 2 AND 10
GROUP BY lat, long"
df <- tbl_df(query_exec(query, project=project_id, max_pages=Inf))
library('ggthemes')
install.packages("ggthemes")
install.packages(reshape)
install.packages("reshape")
?https://2.bp.blogspot.com/-SpjgitfNMb0/TteevRR_Y2I/AAAAAAAAAFQ/IZgd32z2AI8/s1600/distributions.png
?fitdistr()
library(MASS)
?fitdistr()
install.packages("gridExtra")
library(gridExtra)
install.packages(ggmap)
install.packages("ggmap")
install.packages("mmnet")
library(mmnet)
source("http://bioconductor.org/biocLite.R")
useDevel()
biocLite("mmnet")
library(biom)
sessionInfo()
?make_biom
??make_biom
source("http://bioconductor.org/biocLite.R")
biocLite("biomformat")
??make_biom
mlow <- read.csv("KO_ctl_count.csv")
setwd("/Users/leahguthrie/Einstein/Kelly-Lab/Labnotebook/Projects/Infla_cazy/data/")
mlow <- read.csv("KO_ctl_count.csv")
KO <- mlow$State
abundance <- mlow$Ctl
abundance <- as.data.frame(abundance)
KO <- as.data.frame(KO)
biom.data <- make_biom(abundance, observation_metadata = KO)
??make_biom
library(biom)
biom.data <- make_biom(abundance, observation_metadata = KO)
packageVersion("biom")
packageVersion("biomformat")
library("biomformat")
biom.data <- make_biom(abundance, observation_metadata = KO)
biom.data$type <- "enzymatic genes abundance"
###Construct Low state specific network
ssn <- constructSSN(biom.data)
library(mmnet)
ssn <- constructSSN(biom.data)
topologicalAnalyzeNet(ssn)
low <- as_long_data_frame(ssn)
write.csv(low, "ctl_ko_netpoints.csv")
sessionInfo()
